// ----------------------------------------------------------------------------
// Paths
// ----------------------------------------------------------------------------
path / {
    read() { isWorker() }
    write() { isWorker() }
}
path /clients is Clients {
    read() { true }     // We don't need a logged in user to check the client requirements
    write() { false }   // Update using firebase console
}
path /counters/{userId} {
    read() { isCurrentUser(userId) }
}
path /counters/{userId}/unreads is Number {
}
path /channels/{channelId} is Channel {
    /* - Create: any user can create a channel
       - Read: only channel members can read the channel.
       - Update: only channel owner can update the channel 
       - Delete: only channel owner can delete the channel */
    create() { 
        isLoggedIn()}
    read() {
        isLoggedIn() && isChannelMember(channelId, auth.uid)}
    update() { 
        isLoggedIn() && (isCreatorOf(this) || 
            isChannelOwner(channelId, auth.uid))}    
    delete() { 
        isLoggedIn() && (isCreatorOf(this) || 
            isChannelOwner(channelId, auth.uid))}    
}
path /channel-members/{channelId} {
    read() { 
        isLoggedIn() && isChannelMember(channelId, auth.uid)}
}
path /channel-members/{channelId}/{userId} is ChannelMember {
    create() { 
        isLoggedIn() && channelExists(channelId) && isChannelCode(channelId, this.code)}
    update() { 
        isLoggedIn() && ((isCreatorOf(this) && this.role == prior(this.role)) ||
            isChannelOwner(channelId, auth.uid))}
    delete() { 
        isLoggedIn() && (isCreatorOf(this) || 
            isChannelOwner(channelId, auth.uid))}
}
path /channel-messages/{channelId} {
    read() { 
        isLoggedIn() && isChannelMember(channelId, auth.uid)}
}
path /channel-messages/{channelId}/{messageId} is Message {
    /* - Create: any channel member can create a message
       - Update: only message creator can update the channel 
       - Delete: only message creator can delete the channel */
    create() { 
        isLoggedIn() && isChannelMember(channelId, auth.uid) && 
        !isChannelRoleReader(channelId, auth.uid)}
    update() { 
        isLoggedIn() && isCreatorOf(this)}
    delete() { 
        isLoggedIn() && 
        (isCreatorOf(this) || isChannelOwner(channelId, auth.uid))}    
}
path /channel-messages/{channelId}/{messageId}/reactions is Reactions {
    write() {
        isLoggedIn() && isChannelMember(channelId, auth.uid)}
}
path /installs/{userId} is Map<String, Boolean> {
    write() { isCurrentUser(userId) }
}
path /invites/{inviteId} is Invite {
    create() {
        isLoggedIn() &&
        isChannelOwner(this.channel.id, auth.uid)}
}
path /member-channels/{userId} {
    read() { isCurrentUser(userId) }
}
path /tasks/create-user/{taskId} is CreateUserTask {
    create() { 
        isLoggedIn() && this.created_by == auth.uid && 
        (this.request.user_id == auth.uid || this.user_id == auth.uid)}
    read() {
        isLoggedIn() && isCreatorOf(this)}
    delete() { 
        isLoggedIn() && isCreatorOf(this)}    
}
path /typing/{channelId} {
    read() { 
        isLoggedIn() && isChannelMember(channelId, auth.uid)}
}
path /typing/{channelId}/{userId} is UserName {
    write() { 
        isCurrentUser(userId) && isChannelMember(channelId, auth.uid)}
}
path /unreads/{userId} {
    read() { isCurrentUser(userId) }
    delete() { isCurrentUser(userId)}
}
path /unreads/{userId}/{channelId} {
    delete() { 
        isCurrentUser(userId) || 
        isChannelOwner(channelId, auth.uid)}
}
path /unreads/{userId}/{channelId}/{messageId} is Boolean {
    delete() { isCurrentUser(userId) }
}
path /usernames/{username} is AnyKey {
    read() { isLoggedIn() }
}
path /users/{userId} is User {
    /* Any user can read, only worker can write */
    read() { isLoggedIn()}
}
path /users/{userId}/profile is Profile {
    write() { isCurrentUser(userId) && isCreatorOf(this.parent())}
}
path /users/{userId}/presence {
    write() { isCurrentUser(userId) && isCreatorOf(this.parent())}
}
path /users/{userId}/username {
    write() { isCurrentUser(userId) && isCreatorOf(this.parent())}
}
// ----------------------------------------------------------------------------
// Types
// ----------------------------------------------------------------------------
type InitialTimestamp extends Number {
  validate() { initial(this, now) }
}
type InitialTimestampInverted extends Number {
  validate() { initial(this, -now) }
}
type CurrentTimestamp extends Number {
    validate() { this == now }
}
type Timestamp extends Number {
    validate() { this <= (now + 3600000) } // add one hour as buffer
}
type TimestampInverted extends Number {
    validate() { this >= -(now + 3600000) } // add one hour as buffer
}
type AnyKey extends String {
    validate() { this.length == 28 || this.length == 12 }    
}
type AutoKey extends String {
    validate() { this.length == 20 }
}
type PatchrKey extends String {
    validate() { this.length == 12 }
}
type EmailString extends String {
    validate() { this.length <= 256 }
}
type UrlString extends String {
    validate() { this.length <= 256 }
}
type ValueString extends String {
    validate() { this.length <= 50 }
}
type TokenString extends String {
    validate() { this.length <= 256 }
}
type TitleString extends String {
    validate() { this.length <= 200 }
}
type DescriptionString extends String {
    validate() { this.length <= 4000 }  // Roughly a page
}
type BodyString extends String {
    validate() { this.length <= 4000 }  // Roughly a page
}
type CodeString extends String {
    validate() { this.length == 12 } 
}
type UserName extends String {
    validate() { this.length > 2 && this.length <= 21 && this == this.toLowerCase() }
}
type ChannelName extends String {
    validate() { this.length > 2 && this.length <= 200 && this == this.toLowerCase() }
}
type ImageFileName extends String {
    validate() { this.endsWith(".jpg") && this.length <= 100 }
}
type ReactionType extends String {
    validate() { 
        this == ":thumbsup:" || 
        this == ":thumbsdown:" ||
        this == ":grinning:" ||
        this == ":tada:" ||
        this == ":clap:" ||
        this == ":100:" ||
        this == ":poop:" ||
        this == ":confused:" ||
        this == ":heart:" ||        
        this == ":smiley_cat:" ||
        this == ":smiling_imp:" ||
        this == ":muscle:" ||
        this == ":zzz:" ||
        this == ":cocktail:" ||
        this == ":trophy:" ||
        this == ":fireworks:" ||
        this == ":gift:" ||
        this == ":astonished:" ||
        this == ":drooling_face:" ||
        this == ":sleeping:" ||
        this == ":yum:" ||
        this == ":laughing:" ||
        this == ":heart_eyes:" ||
        this == ":bulb:"
    }
}
type ChannelRole extends String {
    validate() { this == "owner" || this == "editor" || this == "reader" }
}
type Notifications extends String {
    validate() { this == "all" || this == "posts_only" || this == "none" }
}
type PhotoSource extends String {
    validate() { this == "google-storage" }
}
type ResponseType extends String {
    validate() { this == "ok" || this == "error" }    
}
type InviteType extends String {
    validate() { this == "invite-editors" || this == "invite-readers" }
}
type Coordinate extends Map<String, Number> {
    validate() { this["lat"] != null && this["lng"] != null }
}
type Reactions extends Map<ReactionType, Map<AnyKey, Boolean>> {
    // Convenience type
}
type Error {
    validate() { this.message.length <= 256 }
    code: Number,
    message: String,
}
type Attachment {
    photo: Photo
}
type Photo {
    filename: ImageFileName,
    height: Number|Null,
    location: Coordinate|Null,
    source: PhotoSource,
    taken_at: Timestamp|Null,
    uploading: Boolean|Null,
    width: Number|Null,
}
type Profile {
    first_name: ValueString|Null,
    last_name: ValueString|Null,
    full_name: ValueString|Null,
    phone: ValueString|Null,
    photo: Photo|Null
}
type Clients {
    ios: Number
}
type Counters {
    unreads: Number|Null
}
type Channel {
    code: CodeString,
    created_at: Timestamp,
    created_by: AnyKey,
    general: Boolean,
    modified_at: Timestamp|Null,
    modified_by: AnyKey|Null,
    name: ChannelName|Null,
    owned_by: AnyKey,
    photo: Photo|Null,
    purpose: DescriptionString|Null,
    title: TitleString,
}
type ChannelMember {
    code: CodeString,
    created_at: Timestamp,
    created_by: AnyKey,
    index_priority_joined_at: Number|Null,
    index_priority_joined_at_desc: Number|Null,
    invite_id: PatchrKey|Null,
    invited_by: AnyKey|Null,
    joined_at: Number|Null,
    joined_at_desc: Number|Null,
    notifications: Notifications|Null,
    priority: Number|Null,
    role: ChannelRole,          
    starred: Boolean|Null,
}
type Invite {
    channel: InviteChannel|Null,
    created_at: Timestamp,
    created_by: AnyKey,
    email: EmailString,
    invited_at: Timestamp,
    invited_at_desc: TimestampInverted,
    inviter: Inviter,
    link: UrlString,
    role: ChannelRole
}
type InviteChannel {
    id: PatchrKey,
    title: TitleString,
}
type Inviter {
    email: EmailString,
    id: AnyKey,
    title: TitleString,
    username: UserName
}
type Message {
    attachments: Map<PatchrKey, Attachment>|Null,
    channel_id: PatchrKey,
    created_at: Timestamp,
    created_at_desc: TimestampInverted,
    created_by: AnyKey,
    message_id: AnyKey|Null,
    modified_at: Timestamp,
    modified_by: AnyKey,
    reactions: Reactions|Null,
    text: BodyString|Null
}
type User {
    validate() { root["usernames"][this.username] == null || 
        root["usernames"][this.username] == key() }
    presence: Boolean|Number|Null,
    created_at: Timestamp,
    created_by: AnyKey,
    modified_at: Timestamp,
    username: UserName,
    developer: Boolean|Null,
    profile: Profile|Null
}
// ----------------------------------------------------------------------------
// Tasks
// ----------------------------------------------------------------------------
type Task {
    created_at: Timestamp,
    created_by: AnyKey,
    response: Response|Null,
}
type CreateUserTask extends Task {
    request: CreateUserRequest
}
type CreateUserRequest {
    user_id: AnyKey,
    username: UserName,
}
type Response {
    error: String|Null,
    result: Any|Null,
}
// ----------------------------------------------------------------------------
// Functions
// ----------------------------------------------------------------------------
function isLoggedIn() { 
    return auth != null 
}
function isCurrentUser(userId) {
    return isLoggedIn() && auth.uid == userId
}
function isWorker() {
    return isLoggedIn() && auth.uid == "patchr-cloud-worker"
}
function isCreatorOf(value) {
    return prior(value).created_by == auth.uid
}

/* Channels */

function isChannelMember(channelId, userId) {
    return prior(root)["channel-members"][channelId][userId] != null
}
function isChannelRoleOwner(channelId, userId) {
    return isChannelMember(channelId, userId) &&
        prior(root)["channel-members"][channelId][userId].role == "owner"
}
function isChannelRoleEditor(channelId, userId) {
    return isChannelMember(channelId, userId) &&
        prior(root)["channel-members"][channelId][userId].role == "editor"
}
function isChannelRoleReader(channelId, userId) {
    return isChannelMember(channelId, userId) &&
        prior(root)["channel-members"][channelId][userId].role == "reader"
}
function isChannelPrimaryOwner(channelId, userId) {
    return prior(root)["channels"][channelId].owned_by == userId
}
function isChannelOwner(channelId, userId) {
    return isChannelPrimaryOwner(channelId, userId) ||
        isChannelRoleOwner(channelId, userId)
}
function isChannelCreator(channelId, userId) {
    return prior(root)["channels"][channelId].created_by == userId
}
function channelExists(channelId) {
    return prior(root)["channels"][channelId] != null
}
function isChannelCode(channelId, code) {
    return prior(root)["channels"][channelId].code == code
}

/* Utilities */

function initial(value, init) { 
    return value == (prior(value) == null ? init : prior(value)) 
}
// ----------------------------------------------------------------------------
// Indexes: These get combined with read/write/validate for same path
// ----------------------------------------------------------------------------
path /users {
    index() {["email"]}
}
path /channels {
    index() {["name"]}
}
path /member-channels/{userId} {
    index() {["index_priority_joined_at_desc"]}
}